//3456789012345678901234567890123456789012345678
// Enemy
// enemy class
// foe wrapper object

var isFound
var beforeFoeCount
var condition

func init()
  isFound = false
  beforeFoeCount = 0
  condition = new Org/Objects/Condition

// loc=undead_crypt and stars 11 over only
// boss R.I.P.
func searchForRIP()
  ?loc ! boss & foe = boss
    isFound = true
    beforeFoeCount = foe.count
  ?isFound & beforeFoeCount <= foe.count
    // R.I.P. is alived.
    beforeFoeCount = foe.count
  :?isFound & beforeFoeCount > foe.count
    // R.I.P. is dead.
    isFound = false
    beforeFoeCount = 0

// ex.)
//   searchForRIP()
//   ?isFoundRIP()
//     equip repeating crossbow // physical ranged weapon
// return true or false
func isFoundRIP()
  return isFound


// ex.) ?isChillable()
//        equipL ice wand dI
// this is givable "chill" to front of enemies.
// chill stuck count max 6.
// return true or false
func isChillable()
  ?foe ! chill
    ?foe.debuffs.count = 0
      return true
    :?foe.debuffs.string ! chill
      return true
    :
      var chillState = condition.getStateBy(foe.debuffs.string, chill)
      ?chillState.stuckCount < 6
        return true
      :?chillState.remainingTime < 45 // keep time. fps 30 (1.5sec = 45)
        return true
  return false

// ex.) ?isBurnable()
//        equipL fire wand dF
// Damage over time (DoT).
// this is givable "dot" to front of enemies.
// dot stuck count max 1.
// retyrn true or false
func isBurnable()
  ?foe ! dot & foe ! immune_to_debuff_damage & foe.debuffs.string = dot
    return true
  return false


// ex.) ?isPoisonable()
//        equipL poison sword dP
// damage stuck count max 1.
// retyrn true or false
func isPoisonable()
  ?foe ! damage & foe.debuffs.string = damage
    return true
  return false


